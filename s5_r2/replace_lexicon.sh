#!/bin/bash

# (c) 2014 Korbinian Riedhammer

# This script is based on s5/utils/prepare_lang.sh.  Based on a data/lang
# directory, generate a new L transducer with the new lexicon.
# Make sure to use the same phone options as used to generate data/lang.

# Begin configuration section.
# position_dependent_phones is false also when position dependent phones and word_boundary.txt
# have been generated by another source
position_dependent_phones=true
reverse=false
sil_prob=0.5
with_pron_probs=false
# end configuration sections

. utils/parse_options.sh

if [ $# -ne 5 ]; then
  echo "usage: local/replace_lexicon.sh <source-lang-dir> <unkword> <new lexicon> <tmp-dir> <lang-dir>"
  echo "e.g.: utils/prepare_lang.sh data/lang '<unk>' data/local/dict2/lexicon.txt data/local/lang2 data/lang2"
  echo "See http://kaldi.sourceforge.net/data_prep.html#data_prep_lang_creating for more info."
  echo "options: "
	echo "     --with-pron-probs                               # default: false"
  echo "     --position-dependent-phones (true|false)        # default: true; if true, use _B, _E, _S & _I"
  echo "                                                     # markers on phones to indicate word-internal positions. "
  echo "     --reverse (true|false)                          # reverse lexicon."
  echo "     --sil-prob <probability of silence>             # default: 0.5 [must have 0 <= silprob < 1]"
  exit 1;
fi

srcdir=$1
oov_word=$2
lexfile=$3
tmpdir=$4
dir=$5

# copy stuff from original lang directory
mkdir -p $dir/phones $tmpdir
cp $srcdir/topo $dir/
cp $srcdir/phones/{context_indep,nonsilence,optional_silence,silence}.{int,csl,txt} $dir/phones/
cp $srcdir/phones/{roots,sets,extra_questions,word_boundary}.{txt,int} $dir/phones

[ -f path.sh ] && . ./path.sh

# make both lexicon versions
if $with_pron_probs; then
	cp $lexfile $tmpdir/lexiconp.txt
  echo "**Creating $tmpdir/lexicon.txt from $lexfile"
  perl -ape 's/(\S+\s+)\S+\s+(.+)/$1$2/;' < $tmpdir/lexiconp.txt > $tmpdir/lexicon.txt || exit 1;
else
	cp $lexfile $tmpdir/lexicon.txt
  echo "**Creating $tmpdir/lexiconp.txt from $lexfile"
  perl -ape 's/(\S+\s+)(.+)/${1}1.0\t$2/;' < $tmpdir/lexicon.txt > $tmpdir/lexiconp.txt || exit 1;
fi


if $position_dependent_phones; then
  # Create $tmpdir/lexicon.original from $tmpdir/lexicon.txt by
  # adding the markers _B, _E, _S, _I depending on word position.
  # In this recipe, these markers apply to silence also.
  # Do this starting from lexiconp.txt only.

  perl -ane '@A=split(" ",$_); $w = shift @A; $p = shift @A; @A>0||die;
         if(@A==1) { print "$w $p $A[0]_S\n"; } else { print "$w $p $A[0]_B ";
         for($n=1;$n<@A-1;$n++) { print "$A[$n]_I "; } print "$A[$n]_E\n"; } ' \
           < $tmpdir/lexiconp.txt > $tmpdir/lexiconp.original || exit 1;

else
  cp $tmpdir/lexiconp.txt $tmpdir/lexiconp.original
fi

if $reverse; then
  echo "reversing lexicon."
  cat $tmpdir/lexiconp.original \
    | awk '{printf "%s %s ",$1, $2;for(i=NF;i>2;i--){printf "%s ",$i;}printf "\n"}' \
    > $tmpdir/lexiconp.txt
else
  mv $tmpdir/lexiconp.original $tmpdir/lexiconp.txt
fi


# add disambig symbols to the lexicon in $tmpdir/lexiconp.txt
# and produce $tmpdir/lexicon_disambig.txt

ndisambig=`utils/add_lex_disambig.pl --pron-probs $tmpdir/lexiconp.txt $tmpdir/lexiconp_disambig.txt`
ndisambig=$[$ndisambig+1]; # add one disambig symbol for silence in lexicon FST.
echo $ndisambig > $tmpdir/lex_ndisambig

# Format of lexiconp_disambig.txt:
# !SIL	1.0   SIL_S
# <SPOKEN_NOISE>	1.0   SPN_S #1
# <UNK>	1.0  SPN_S #2
# <NOISE>	1.0  NSN_S
# !EXCLAMATION-POINT	1.0  EH2_B K_I S_I K_I L_I AH0_I M_I EY1_I SH_I AH0_I N_I P_I OY2_I N_I T_E

( for n in `seq 0 $ndisambig`; do echo '#'$n; done ) >$dir/phones/disambig.txt

# Regenerate the phone symbol table
echo "<eps>" | cat - $dir/phones/{silence,nonsilence,disambig}.txt | \
  awk '{n=NR-1; print $1, n;}' > $dir/phones.txt

# Create word symbol table.
cat $tmpdir/lexiconp.txt | awk '{print $1}' | sort | uniq  | \
 awk 'BEGIN{print "<eps> 0";} {printf("%s %d\n", $1, NR);} END{printf("#0 %d\n<s> %d\n</s> %d\n", NR+1, NR+2, NR+3);} ' \
  > $dir/words.txt || exit 1;

# format of $dir/words.txt:
#<eps> 0
#!EXCLAMATION-POINT 1
#!SIL 2
#"CLOSE-QUOTE 3
#...

silphone=`cat $srcdir/phones/optional_silence.txt` || exit 1;

# create $dir/phones/align_lexicon.{txt,int}.
# This is the new-new style of lexicon aligning.

# First remove pron-probs from the lexicon.
perl -ape 's/(\S+\s+)\S+\s+(.+)/$1$2/;' <$tmpdir/lexiconp.txt >$tmpdir/align_lexicon.txt

# Note: here, $silphone will have no suffix e.g. _S because it occurs as optional-silence,
# and is not part of a word.
[ ! -z "$silphone" ] && echo "<eps> $silphone" >> $tmpdir/align_lexicon.txt

cat $tmpdir/align_lexicon.txt | \
 perl -ane '@A = split; print $A[0], " ", join(" ", @A), "\n";' | sort | uniq > $dir/phones/align_lexicon.txt

# create phones/align_lexicon.int
cat $dir/phones/align_lexicon.txt | utils/sym2int.pl -f 3- $dir/phones.txt | \
  utils/sym2int.pl -f 1-2 $dir/words.txt > $dir/phones/align_lexicon.int

# Create the basic L.fst without disambiguation symbols, for use
# in training.
utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp.txt $sil_prob $silphone | \
	fstcompile --isymbols=$dir/phones.txt --osymbols=$dir/words.txt \
	--keep_isymbols=false --keep_osymbols=false | \
		fstarcsort --sort_type=olabel > $dir/L.fst || exit 1;

# Make the oov word.
echo "$oov_word" > $dir/oov.txt || exit 1;
cat $dir/oov.txt | utils/sym2int.pl $dir/words.txt >$dir/oov.int || exit 1;

# Create these lists of phones in colon-separated integer list form too,
# for purposes of being given to programs as command-line options.
for f in disambig; do
  utils/sym2int.pl $dir/phones.txt < $dir/phones/$f.txt >$dir/phones/$f.int
  utils/sym2int.pl $dir/phones.txt < $dir/phones/$f.txt | \
   awk '{printf(":%d", $1);} END{printf "\n"}' | sed s/:// > $dir/phones/$f.csl || exit 1;
done


# Create the lexicon FST with disambiguation symbols, and put it in lang_test.
# There is an extra step where we create a loop to "pass through" the
# disambiguation symbols from G.fst.
phone_disambig_symbol=`grep \#0 $dir/phones.txt | awk '{print $2}'`
word_disambig_symbol=`grep \#0 $dir/words.txt | awk '{print $2}'`

utils/make_lexicon_fst.pl --pron-probs $tmpdir/lexiconp_disambig.txt $sil_prob $silphone '#'$ndisambig | \
   fstcompile --isymbols=$dir/phones.txt --osymbols=$dir/words.txt \
   --keep_isymbols=false --keep_osymbols=false |   \
   fstaddselfloops  "echo $phone_disambig_symbol |" "echo $word_disambig_symbol |" | \
   fstarcsort --sort_type=olabel > $dir/L_disambig.fst || exit 1;


echo "$(basename $0): validating output directory"
! utils/validate_lang.pl $dir && echo "$(basename $0): error validating output" &&  exit 1;

exit 0;
